---
title: "Macroeconomic Trends Explorer"
author: "Ephrata Getachew, Aika Shorayeva, Ebony Wamwitha"
date: 12/13/2023
format:
  html:
    theme: lumen
    highlight: tango
    toc: true
---

```{r, message=FALSE}
#| label: setup
#| include: false

# Set code chunk defaults 
# Consider adding `message = FALSE` option
knitr::opts_chunk$set(echo = FALSE) 
                      
# Set R environment options
options(knitr.kable.NA = '')

# Load packages
library(tidyverse)
library(ggplot2)
library(plotly)
library(GGally)
library(tidyr)
library(mice)
library(DT)
library(rmarkdown)
library(dplyr)
library(shiny)
```

```{r, message = FALSE, warning=FALSE}
#| echo: false

data1 <- read_csv("data/gni_gdp_lifeexp.csv", na = c(".."))
data2 <- read_csv("data/expected_years_of_schooling.csv", na = c(".."))
```

```{r,include=FALSE, message=FALSE }
#| echo: false

data <- rbind(data1, data2)
```

```{r,include=FALSE, message=FALSE}
#| echo: false

for (year in 2000:2022) {
  old_name <- paste0(year, " [YR", year, "]")
  new_name <- as.character(year)
  names(data)[names(data) == old_name] <- new_name
}

start_year <- 2000
end_year <- 2022
data <- data %>%
  filter(if_any(`2000`:`2022`, ~ !is.na(.)))

data0 <- data %>%
  select(-c(`Country Code`, `Series Code`)) %>% 
  rename("Country" = "Country Name",
         "variable" = "Series Name"
  )

data0 <- data0 %>% 
  pivot_longer(cols = starts_with("20"),
               names_to = "year",
               values_to = "value")

data3 <- data0 %>% 
  pivot_wider( names_from = variable,
               values_from = value)

macro_trends <- data3 %>% 
  rename(
    "life_exp" = "Life expectancy at birth, total (years)",
    "gni" = "GNI per capita (constant 2015 US$)",
    "gdp" = "GDP per capita (constant 2015 US$)",
    "yrs_sch" = "Expected years of schooling"
  )
```

```{r,include=FALSE, message=FALSE}
#| label: impute-missing
#| echo: false

# change variabl types so all included in mice for imputation
macro_trends <- macro_trends |>
  mutate(Country = as.factor(Country)
        , year = parse_number(year))

# visualize missingness patterns
md.pattern(macro_trends, rotate.names = TRUE)
naniar::vis_miss(macro_trends)

imp <- mice(macro_trends)
imp

check <- complete(imp, "broad")
imp_dat <- complete(imp, "long")

imp_dat_avg <- imp_dat |>
  group_by(Country, year) |>
  summarize(across(c(life_exp, gni, gdp, yrs_sch), ~ mean(.)
                   , .names="{col}_mean")
            , across(c(life_exp, gni, gdp, yrs_sch), ~ min(.)
                     , .names="{col}_min")
            , across(c(life_exp, gni, gdp, yrs_sch), ~ max(.)
                     , .names="{col}_max")
            , across(c(life_exp, gni, gdp, yrs_sch), ~ sd(.)
                     , .names="{col}_sd")) |>
  select(Country, year, starts_with("gdp"), starts_with("life_exp"))

# keep mean for simplicity / for class project 
# do ***NOT*** do this in real life
macro_trends_imp <- imp_dat |>
  group_by(Country, year) |>
  summarize(across(c(life_exp, gni, gdp, yrs_sch), ~ mean(.)))

write_csv(macro_trends, "data/macro_trends_imp.csv")
```

```{r, message=FALSE}
set.seed(231)  
k_value <- 4  

latest_data <- macro_trends_imp %>%
  group_by(Country) %>%
  filter(year == max(year))  

# Select the variables for clustering
cluster_data <- latest_data[, c("life_exp","gdp", "gni", "yrs_sch")]

# Standardizing variables
scaled_data <- scale(cluster_data)

# Performing k-means clustering
kmeans_result <- kmeans(scaled_data, centers = k_value)

# Adding cluster information to the original data
macro_trends_with_clusters <- cbind(macro_trends, cluster = as.factor(kmeans_result$cluster))
```

```{r, message=FALSE}
# Clustering Visualization

set.seed(231)

# Scaling variables
macro_trends_imp_scaled <- macro_trends_imp %>%
  mutate(across(where(is.numeric),  ~scale(.)[,1], .names = "{.col}_scaled")) %>%
  select(Country, year, life_exp_scaled, gni_scaled, yrs_sch_scaled)

df <- select(filter(macro_trends_imp_scaled, year == max(year)), life_exp_scaled, gni_scaled, yrs_sch_scaled)
df$cluster = factor(kmeans(select(ungroup(df), -Country), 4)$cluster)
p <- plot_ly(df, x=~life_exp_scaled, y=~gni_scaled, 
z=~yrs_sch_scaled, color=~cluster) %>%
  layout(title = 'Human Development Index Indicators (2022)', scene = list(xaxis = list(title = 'Birth Life Expectancy (yrs)'), 
         yaxis = list(title = 'GNI per capita'), zaxis = list(title = 'Expected Years of Schooling (%)')))%>% 
     add_markers(size=1.5)
print(p)
```



# Introduction 

Knowing what influences a country's development is a never-ending task in the field of macroeconomics. Expanding upon the work completed in the middle of the semester, our final assignment explores the macroeconomic patterns in many nations. However, this time, our focal point revolves around key indicators that shape the **Human Development Index (HDI)**, including **life expectancy at birth**, **expected and mean years of schooling**, and **Gross National Income (GNI) per capita**.
Through the use of unsupervised learning, we aim to cluster countries based on these HDI indicators, revealing trends and ideas beyond geographic borders. The main goal of our research is to predict the HDI category a certain nation may fall into, and potentially compare the results with the recognized HDI Rank list. We hope that this effort will help evaluate our model's accuracy. 
We also hope to develop a predictive model for countries’ **Gross Domestic Product (GDP)** using a combination of the HDI indicators. By dividing the data into training and testing sets, our method makes it possible to carefully assess the prediction accuracy.

## k-Means Clsutering over HDI Indicators

**HDI (Human Development Index)** - a commonly used measure of each country's social and economic development - is determined on the basis of following factors:

1. Health
2. Education
3. Standard of Living

Calculated as a geometric mean of the 3, HDI Rank is assigned to the countries, whcih are then put into 4 categories, from very high human development (> 0.8) to low human development (< 0.55).

For our Cluster Analysis, we tried to imitate this process of categorizing countries using different means. Namely, we clustered all of the countries in *3-dimensional space* over three variables (Expected Years of Schooling, Life Expectancy, and GNI) that we chose to signify the factors mentioned above. The visualization for that can be seen in the link below. 

[3-Dimensional Clustering Visualization](https://rxl6s6-egetachew1.shinyapps.io/blog-eea/)

### Cluster Mapping

While it the 3-dimensional visualization helps us makes sense of how clusters were made, a map might aid us better to see which countries were grouped together by our model. 

![](img/cluster_map.png)

### Interpretation

While there are some distinct patterns (e.g., Northern American and European countries getting grouped together), which seem to coincide with the categories generated by UNDP, we also observe a lot of inconsistencies across 2 lists. There are several potential reasons for that:

* **Different Methodologies**
: As was mentioned previously, HDI Rank of individual countries is calculated as a geometric mean of the variables of interest. There are also very strict points of cutout, based on which UN puts different countries into different categories of human development. Meanwhile, rather than categorizing countries in a linear manner k-Means clustering over multiple variables identifies distinct clusters of datapoint in space, which might not always coincide with the list generated via the previous method.

* **Different Variables**
: For research purposes, we have identified 3 variables of interest, including Expected Years of Schooling, Life Expectancy, and GNI to signify various facets of human development. UNDP also uses the same variables. However, oftentimes, they include several other variation of these variables (e.g., rate of education completion) to the mix to account for a greater picture.

* **Other Factors**
: While not disclosed to public, there might be series of different factors that UN considers whlist making the ranking, which we might've not accounted for


## Predictive Model 

A linear regression model was developed using the macro_trends_imp dataset to predict Gross Domestic Product (GDP). The model leverages three key predictors: **Gross National Income (gni)**, **Years of Schooling (yrs_sch)**, and **Life Expectancy (life_exp)**. The dataset was split into a training set, encompassing observations up to the year 2018, and a test set comprising data from 2019 onwards. The assessment of the model's performance involved analyzing prediction errors and conducting linear regression analyses for each predictor.

```{r}
train <- macro_trends_imp %>%
  filter(year < 2019)

test <- macro_trends_imp %>%
  filter(year >= 2019)
```


```{r}
fit <- lm(gdp ~ gni + yrs_sch + life_exp, data = train)
summary(fit)
```

In the linear regression analysis on GDP, predictors such as gni and yrs_sch exhibit strong positive effects, while life_exp shows a weaker negative impact. The R-squared value of 0.7036 indicates that the model explains approximately 70.36% of GDP variability.


```{r, message=FALSE}
#| out.width: 80%
#| fig.align: right
#| echo: false

# linear regression model
fit_individual <- lm(gdp ~ gni, data = train)

# Make predictions on the test set
test$prediction_individual <- predict(fit_individual, newdata = test)

# Plot
p_individual <- ggplot(test, aes(x = gni, y = gdp, color = prediction_individual)) +
  geom_point(size = 3) +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +
  labs(title = "Prediction vs. Actual (gni)",
       x = "gni",
       y = "GDP") +
  theme_minimal()

p_individual
```

The linear regression model trained on the data have not accurately captured the relationship between **GDP** and **GNI** due to the presence of outliers. The plot suggests that the model struggled to fit the extreme values on the left side, potentially resulting in skewed predictions.


## Table

```{r }
#| label: dt-example
#| message: false
#| echo: false

test$prediction <- predict(fit, newdata = select(ungroup(test), gni, yrs_sch, life_exp))

# Round the numbers to 3 decimal places
test$gdp <- round(test$gdp, 3)
test$prediction <- round(test$prediction, 3)

# prediction error
test$error <- round(abs(test$gdp - test$prediction),3)

# Sort error in ascending order
test <- test[order(test$error), ]

test |>
  select(gdp, prediction, error) |>
  datatable(colnames = c("Country", "GDP", "Predicted GDP", "Error"),
            filter = 'top',
            options = list(pageLength = 10, autoWidth = TRUE))
```


The model struggles to accurately predict GDP for countries due to the complex nature of economies. Economic systems can be unpredictable and easily influenced by external factors, making it challenging to create precise models. The limited data for some countries makes it harder to establish strong connections between predictors and GDP, resulting in less dependable predictions. Moreover, each country has unique aspects like regional dependencies and different economic structures that the chosen predictors might not fully capture.

Additionally, we only considered three variables in the model, but there are more factors that we didn't take into account. In the model, we treated the variables as independent, but in the real world, these predictors are often interdependent. For instance, consider the relationship between **Gross National Income (GNI)**, **Years of Schooling (yrs_sch)**, and **Life Expectancy (life_exp)**. In reality, higher GNI might positively influence both education levels and life expectancy. Neglecting such interdependencies can lead to an oversimplified model that fails to capture the intricate dynamics of the economic system. To improve accuracy, future models should consider a broader set of variables and account for the interconnections between predictors to better reflect real-world complexities.

# Conclusion

Utilizing unsupervised learning to cluster countries and predicting GDP through supervised learning, our model provided valuable insights into the dynamics of economic development. However, a notable observation is the tendency for GDP overprediction by our model, likely influenced by the unprecedented global disruptions caused by the COVID-19 pandemic. This may emphasize how the model needs to be improved to better account for unanticipated shocks and how real-time data may need to be included for increased accuracy. 

# Suggestions for the future

As we look to the future, our investigation of macroeconomic patterns using Human Development Index (HDI) indicators opens up new and intriguing areas for further study and improvement. Further developments of the project might consider using more sophisticated algorithms and methods, and broadening the dataset to cover a wider range of socioeconomic factors in order to improve the model. It should also be a priority to address the effects of external shocks like the COVID-19 pandemic, which may prompt the creation of future models that can adjust to unforeseen interruptions.


# References

```{r, include= FALSE}
citation("DT")
citation("tidyverse")
citation("ggplot2")
citation("plotly")
citation("GGally")
citation("tidyr")
citation("mice")
citation("shiny")
```

<!-- Textbook -->
Baumer, B. S., Kaplan, D. T., and Horton, N. J. (2021), *Modern Data Science with R* (2nd ed.), Boca Raton, FL: CRC Press.

<!-- Dataset -->

World Bank (2000-2022). "World Development Indicators," The World Bank DataBank. Available at <https://databank.worldbank.org/source/world-development-indicators>.


<!-- R package -->

C. Sievert. Interactive Web-Based Data Visualization with R, plotly, and shiny. Chapman and Hall/CRC Florida, 2020.

H. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016.

Schloerke B, Cook D, Larmarange J, Briatte F, Marbach M, Thoen E, Elberg A, Crowley J (2021). _GGally: Extension to 'ggplot2'_. R package version 2.1.2, <https://CRAN.R-project.org/package=GGally>.

Stef van Buuren, Karin Groothuis-Oudshoorn (2011). mice: Multivariate Imputation by Chained Equations in R. Journal of Statistical Software, 45(3), 1-67. DOI 10.18637/jss.v045.i03.

Wickham H, Averick M, Bryan J, Chang W, McGowan LD, François R, Grolemund G, Hayes A, Henry L, Hester J, Kuhn M, Pedersen TL, Miller E, Bache SM, Müller K, Ooms J, Robinson D, Seidel DP, Spinu V, Takahashi K, Vaughan D, Wilke C, Woo K, Yutani H (2019). “Welcome to the tidyverse.” _Journal of Open Source Software_, *4*(43), 1686. doi:10.21105/joss.01686 <https://doi.org/10.21105/joss.01686>.

Wickham H, Vaughan D, Girlich M (2023). _tidyr: Tidy Messy Data_. R package version 1.3.0, <https://CRAN.R-project.org/package=tidyr>.

Winston Chang, Joe Cheng, JJ Allaire, Carson Sievert, Barret Schloerke, Yihui Xie, Jeff Allen, Jonathan McPherson, Alan Diper, Barbara Borges (2023). shiny: Web Application Framework for R <https://CRAN.R-project.org/package=shiny>

Xie Y, Cheng J, Tan X (2022). "DT: A Wrapper of the JavaScript Library 'DataTables'," R package version 0.24, available at <https://CRAN.R-project.org/package=DT>.
